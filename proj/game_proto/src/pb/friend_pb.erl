%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.6
%% Version source: file
-module(friend_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("friend_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type friend_apply_list_c2s() :: #friend_apply_list_c2s{}.

-type friend_apply_list_s2c() :: #friend_apply_list_s2c{}.

-type p_applyInfo() :: #p_applyInfo{}.

-type friend_new_apply_c2s() :: #friend_new_apply_c2s{}.

-type friend_new_apply_s2c() :: #friend_new_apply_s2c{}.

-type friend_handle_apply_c2s() :: #friend_handle_apply_c2s{}.

-type friend_handle_apply_s2c() :: #friend_handle_apply_s2c{}.

-type friend_list_c2s() :: #friend_list_c2s{}.

-type friend_list_s2c() :: #friend_list_s2c{}.

-type p_friendInfo() :: #p_friendInfo{}.

-export_type(['friend_apply_list_c2s'/0, 'friend_apply_list_s2c'/0, 'p_applyInfo'/0, 'friend_new_apply_c2s'/0, 'friend_new_apply_s2c'/0, 'friend_handle_apply_c2s'/0, 'friend_handle_apply_s2c'/0, 'friend_list_c2s'/0, 'friend_list_s2c'/0, 'p_friendInfo'/0]).
-type '$msg_name'() :: friend_apply_list_c2s | friend_apply_list_s2c | p_applyInfo | friend_new_apply_c2s | friend_new_apply_s2c | friend_handle_apply_c2s | friend_handle_apply_s2c | friend_list_c2s | friend_list_s2c | p_friendInfo.
-type '$msg'() :: friend_apply_list_c2s() | friend_apply_list_s2c() | p_applyInfo() | friend_new_apply_c2s() | friend_new_apply_s2c() | friend_handle_apply_c2s() | friend_handle_apply_s2c() | friend_list_c2s() | friend_list_s2c() | p_friendInfo().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      friend_apply_list_c2s -> encode_msg_friend_apply_list_c2s(id(Msg, TrUserData), TrUserData);
      friend_apply_list_s2c -> encode_msg_friend_apply_list_s2c(id(Msg, TrUserData), TrUserData);
      p_applyInfo -> encode_msg_p_applyInfo(id(Msg, TrUserData), TrUserData);
      friend_new_apply_c2s -> encode_msg_friend_new_apply_c2s(id(Msg, TrUserData), TrUserData);
      friend_new_apply_s2c -> encode_msg_friend_new_apply_s2c(id(Msg, TrUserData), TrUserData);
      friend_handle_apply_c2s -> encode_msg_friend_handle_apply_c2s(id(Msg, TrUserData), TrUserData);
      friend_handle_apply_s2c -> encode_msg_friend_handle_apply_s2c(id(Msg, TrUserData), TrUserData);
      friend_list_c2s -> encode_msg_friend_list_c2s(id(Msg, TrUserData), TrUserData);
      friend_list_s2c -> encode_msg_friend_list_s2c(id(Msg, TrUserData), TrUserData);
      p_friendInfo -> encode_msg_p_friendInfo(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_friend_apply_list_c2s(_Msg, _TrUserData) -> <<>>.

encode_msg_friend_apply_list_s2c(Msg, TrUserData) -> encode_msg_friend_apply_list_s2c(Msg, <<>>, TrUserData).


encode_msg_friend_apply_list_s2c(#friend_apply_list_s2c{apply_list = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_friend_apply_list_s2c_apply_list(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_p_applyInfo(Msg, TrUserData) -> encode_msg_p_applyInfo(Msg, <<>>, TrUserData).


encode_msg_p_applyInfo(#p_applyInfo{id = F1, role_id = F2, name = F3, gender = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
	    true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
	 end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_friend_new_apply_c2s(Msg, TrUserData) -> encode_msg_friend_new_apply_c2s(Msg, <<>>, TrUserData).


encode_msg_friend_new_apply_c2s(#friend_new_apply_c2s{friend_uid = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_friend_new_apply_s2c(Msg, TrUserData) -> encode_msg_friend_new_apply_s2c(Msg, <<>>, TrUserData).


encode_msg_friend_new_apply_s2c(#friend_new_apply_s2c{success = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_friend_handle_apply_c2s(Msg, TrUserData) -> encode_msg_friend_handle_apply_c2s(Msg, <<>>, TrUserData).


encode_msg_friend_handle_apply_c2s(#friend_handle_apply_c2s{apply_id = F1, is_accept = F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData) end, begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end.

encode_msg_friend_handle_apply_s2c(Msg, TrUserData) -> encode_msg_friend_handle_apply_s2c(Msg, <<>>, TrUserData).


encode_msg_friend_handle_apply_s2c(#friend_handle_apply_s2c{success = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_friend_list_c2s(_Msg, _TrUserData) -> <<>>.

encode_msg_friend_list_s2c(Msg, TrUserData) -> encode_msg_friend_list_s2c(Msg, <<>>, TrUserData).


encode_msg_friend_list_s2c(#friend_list_s2c{friend_list = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_friend_list_s2c_friend_list(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_p_friendInfo(Msg, TrUserData) -> encode_msg_p_friendInfo(Msg, <<>>, TrUserData).


encode_msg_p_friendInfo(#p_friendInfo{role_id = F1, name = F2, gender = F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
	    true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
	 end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

e_mfield_friend_apply_list_s2c_apply_list(Msg, Bin, TrUserData) -> SubBin = encode_msg_p_applyInfo(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_field_friend_apply_list_s2c_apply_list([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>, Bin3 = e_mfield_friend_apply_list_s2c_apply_list(id(Elem, TrUserData), Bin2, TrUserData), e_field_friend_apply_list_s2c_apply_list(Rest, Bin3, TrUserData);
e_field_friend_apply_list_s2c_apply_list([], Bin, _TrUserData) -> Bin.

e_mfield_friend_list_s2c_friend_list(Msg, Bin, TrUserData) -> SubBin = encode_msg_p_friendInfo(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_field_friend_list_s2c_friend_list([Elem | Rest], Bin, TrUserData) -> Bin2 = <<Bin/binary, 10>>, Bin3 = e_mfield_friend_list_s2c_friend_list(id(Elem, TrUserData), Bin2, TrUserData), e_field_friend_list_s2c_friend_list(Rest, Bin3, TrUserData);
e_field_friend_list_s2c_friend_list([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) -> Utf8 = unicode:characters_to_binary(S), Bin2 = e_varint(byte_size(Utf8), Bin), <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) -> Bin2 = e_varint(byte_size(Bytes), Bin), <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) -> BytesBin = iolist_to_binary(Bytes), Bin2 = e_varint(byte_size(BytesBin), Bin), <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
	     {varint, FNum, N} -> BinF = e_varint(FNum bsl 3, Bin), e_varint(N, BinF);
	     {length_delimited, FNum, Data} -> BinF = e_varint(FNum bsl 3 bor 2, Bin), BinL = e_varint(byte_size(Data), BinF), <<BinL/binary, Data/binary>>;
	     {group, FNum, GroupFields} -> Bin1 = e_varint(FNum bsl 3 bor 3, Bin), Bin2 = e_unknown_elems(GroupFields, Bin1), e_varint(FNum bsl 3 bor 4, Bin2);
	     {fixed32, FNum, V} -> BinF = e_varint(FNum bsl 3 bor 5, Bin), <<BinF/binary, V:32/little>>;
	     {fixed64, FNum, V} -> BinF = e_varint(FNum bsl 3 bor 1, Bin), <<BinF/binary, V:64/little>>
	   end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) -> Bin2 = <<Bin/binary, (N band 127 bor 128)>>, e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) -> TrUserData = proplists:get_value(user_data, Opts), decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(friend_apply_list_c2s, Bin, TrUserData) -> id(decode_msg_friend_apply_list_c2s(Bin, TrUserData), TrUserData);
decode_msg_2_doit(friend_apply_list_s2c, Bin, TrUserData) -> id(decode_msg_friend_apply_list_s2c(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_applyInfo, Bin, TrUserData) -> id(decode_msg_p_applyInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit(friend_new_apply_c2s, Bin, TrUserData) -> id(decode_msg_friend_new_apply_c2s(Bin, TrUserData), TrUserData);
decode_msg_2_doit(friend_new_apply_s2c, Bin, TrUserData) -> id(decode_msg_friend_new_apply_s2c(Bin, TrUserData), TrUserData);
decode_msg_2_doit(friend_handle_apply_c2s, Bin, TrUserData) -> id(decode_msg_friend_handle_apply_c2s(Bin, TrUserData), TrUserData);
decode_msg_2_doit(friend_handle_apply_s2c, Bin, TrUserData) -> id(decode_msg_friend_handle_apply_s2c(Bin, TrUserData), TrUserData);
decode_msg_2_doit(friend_list_c2s, Bin, TrUserData) -> id(decode_msg_friend_list_c2s(Bin, TrUserData), TrUserData);
decode_msg_2_doit(friend_list_s2c, Bin, TrUserData) -> id(decode_msg_friend_list_s2c(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_friendInfo, Bin, TrUserData) -> id(decode_msg_p_friendInfo(Bin, TrUserData), TrUserData).



decode_msg_friend_apply_list_c2s(Bin, TrUserData) -> dfp_read_field_def_friend_apply_list_c2s(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_friend_apply_list_c2s(<<>>, 0, 0, _, _) -> #friend_apply_list_c2s{};
dfp_read_field_def_friend_apply_list_c2s(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_friend_apply_list_c2s(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_friend_apply_list_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_apply_list_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_friend_apply_list_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_friend_apply_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      1 -> skip_64_friend_apply_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      2 -> skip_length_delimited_friend_apply_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      3 -> skip_group_friend_apply_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      5 -> skip_32_friend_apply_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_friend_apply_list_c2s(<<>>, 0, 0, _, _) -> #friend_apply_list_c2s{}.

skip_varint_friend_apply_list_c2s(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_friend_apply_list_c2s(Rest, Z1, Z2, F, TrUserData);
skip_varint_friend_apply_list_c2s(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_friend_apply_list_c2s(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_friend_apply_list_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_friend_apply_list_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_friend_apply_list_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_apply_list_c2s(Rest2, 0, 0, F, TrUserData).

skip_group_friend_apply_list_c2s(Bin, _, Z2, FNum, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_apply_list_c2s(Rest, 0, Z2, FNum, TrUserData).

skip_32_friend_apply_list_c2s(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_friend_apply_list_c2s(Rest, Z1, Z2, F, TrUserData).

skip_64_friend_apply_list_c2s(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_friend_apply_list_c2s(Rest, Z1, Z2, F, TrUserData).

decode_msg_friend_apply_list_s2c(Bin, TrUserData) -> dfp_read_field_def_friend_apply_list_s2c(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_friend_apply_list_s2c(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_friend_apply_list_s2c_apply_list(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_friend_apply_list_s2c(<<>>, 0, 0, _, R1, TrUserData) -> #friend_apply_list_s2c{apply_list = lists_reverse(R1, TrUserData)};
dfp_read_field_def_friend_apply_list_s2c(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_friend_apply_list_s2c(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_friend_apply_list_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_apply_list_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_friend_apply_list_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_friend_apply_list_s2c_apply_list(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_friend_apply_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_friend_apply_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_friend_apply_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_friend_apply_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_friend_apply_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_friend_apply_list_s2c(<<>>, 0, 0, _, R1, TrUserData) -> #friend_apply_list_s2c{apply_list = lists_reverse(R1, TrUserData)}.

d_field_friend_apply_list_s2c_apply_list(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_friend_apply_list_s2c_apply_list(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_friend_apply_list_s2c_apply_list(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_p_applyInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_friend_apply_list_s2c(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_friend_apply_list_s2c(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_friend_apply_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_friend_apply_list_s2c(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_apply_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_friend_apply_list_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_friend_apply_list_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_friend_apply_list_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_apply_list_s2c(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_friend_apply_list_s2c(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_apply_list_s2c(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_friend_apply_list_s2c(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_apply_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_friend_apply_list_s2c(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_apply_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_p_applyInfo(Bin, TrUserData) -> dfp_read_field_def_p_applyInfo(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_applyInfo(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_p_applyInfo_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_applyInfo(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_p_applyInfo_role_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_applyInfo(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_p_applyInfo_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_applyInfo(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_p_applyInfo_gender(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_applyInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #p_applyInfo{id = F@_1, role_id = F@_2, name = F@_3, gender = F@_4};
dfp_read_field_def_p_applyInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_p_applyInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_p_applyInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_p_applyInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_p_applyInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_p_applyInfo_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      16 -> d_field_p_applyInfo_role_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      26 -> d_field_p_applyInfo_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      32 -> d_field_p_applyInfo_gender(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_p_applyInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    1 -> skip_64_p_applyInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    2 -> skip_length_delimited_p_applyInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    3 -> skip_group_p_applyInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
	    5 -> skip_32_p_applyInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_p_applyInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #p_applyInfo{id = F@_1, role_id = F@_2, name = F@_3, gender = F@_4}.

d_field_p_applyInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_p_applyInfo_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_applyInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_applyInfo(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_p_applyInfo_role_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_p_applyInfo_role_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_applyInfo_role_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_applyInfo(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_p_applyInfo_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_p_applyInfo_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_applyInfo_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end, dfp_read_field_def_p_applyInfo(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_p_applyInfo_gender(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_p_applyInfo_gender(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_applyInfo_gender(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_applyInfo(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_p_applyInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_p_applyInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_p_applyInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_p_applyInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_p_applyInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_p_applyInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_p_applyInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_p_applyInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_p_applyInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_p_applyInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_p_applyInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_p_applyInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_p_applyInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_p_applyInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_friend_new_apply_c2s(Bin, TrUserData) -> dfp_read_field_def_friend_new_apply_c2s(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_friend_new_apply_c2s(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_friend_new_apply_c2s_friend_uid(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_friend_new_apply_c2s(<<>>, 0, 0, _, F@_1, _) -> #friend_new_apply_c2s{friend_uid = F@_1};
dfp_read_field_def_friend_new_apply_c2s(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_friend_new_apply_c2s(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_friend_new_apply_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_new_apply_c2s(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_friend_new_apply_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_friend_new_apply_c2s_friend_uid(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_friend_new_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_friend_new_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_friend_new_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_friend_new_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_friend_new_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_friend_new_apply_c2s(<<>>, 0, 0, _, F@_1, _) -> #friend_new_apply_c2s{friend_uid = F@_1}.

d_field_friend_new_apply_c2s_friend_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_friend_new_apply_c2s_friend_uid(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_friend_new_apply_c2s_friend_uid(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_friend_new_apply_c2s(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_friend_new_apply_c2s(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_friend_new_apply_c2s(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_friend_new_apply_c2s(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_new_apply_c2s(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_friend_new_apply_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_friend_new_apply_c2s(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_friend_new_apply_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_new_apply_c2s(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_friend_new_apply_c2s(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_new_apply_c2s(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_friend_new_apply_c2s(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_new_apply_c2s(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_friend_new_apply_c2s(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_new_apply_c2s(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_friend_new_apply_s2c(Bin, TrUserData) -> dfp_read_field_def_friend_new_apply_s2c(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_friend_new_apply_s2c(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_friend_new_apply_s2c_success(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_friend_new_apply_s2c(<<>>, 0, 0, _, F@_1, _) -> #friend_new_apply_s2c{success = F@_1};
dfp_read_field_def_friend_new_apply_s2c(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_friend_new_apply_s2c(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_friend_new_apply_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_new_apply_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_friend_new_apply_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_friend_new_apply_s2c_success(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_friend_new_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_friend_new_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_friend_new_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_friend_new_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_friend_new_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_friend_new_apply_s2c(<<>>, 0, 0, _, F@_1, _) -> #friend_new_apply_s2c{success = F@_1}.

d_field_friend_new_apply_s2c_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_friend_new_apply_s2c_success(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_friend_new_apply_s2c_success(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) -> {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest}, dfp_read_field_def_friend_new_apply_s2c(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_friend_new_apply_s2c(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_friend_new_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_friend_new_apply_s2c(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_new_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_friend_new_apply_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_friend_new_apply_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_friend_new_apply_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_new_apply_s2c(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_friend_new_apply_s2c(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_new_apply_s2c(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_friend_new_apply_s2c(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_new_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_friend_new_apply_s2c(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_new_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_friend_handle_apply_c2s(Bin, TrUserData) -> dfp_read_field_def_friend_handle_apply_c2s(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_friend_handle_apply_c2s(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_friend_handle_apply_c2s_apply_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_friend_handle_apply_c2s(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_friend_handle_apply_c2s_is_accept(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_friend_handle_apply_c2s(<<>>, 0, 0, _, F@_1, F@_2, _) -> #friend_handle_apply_c2s{apply_id = F@_1, is_accept = F@_2};
dfp_read_field_def_friend_handle_apply_c2s(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_friend_handle_apply_c2s(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_friend_handle_apply_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_handle_apply_c2s(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_friend_handle_apply_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_friend_handle_apply_c2s_apply_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
      16 -> d_field_friend_handle_apply_c2s_is_accept(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_friend_handle_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
	    1 -> skip_64_friend_handle_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
	    2 -> skip_length_delimited_friend_handle_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
	    3 -> skip_group_friend_handle_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
	    5 -> skip_32_friend_handle_apply_c2s(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_friend_handle_apply_c2s(<<>>, 0, 0, _, F@_1, F@_2, _) -> #friend_handle_apply_c2s{apply_id = F@_1, is_accept = F@_2}.

d_field_friend_handle_apply_c2s_apply_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_friend_handle_apply_c2s_apply_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_friend_handle_apply_c2s_apply_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_friend_handle_apply_c2s(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_friend_handle_apply_c2s_is_accept(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_friend_handle_apply_c2s_is_accept(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_friend_handle_apply_c2s_is_accept(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest}, dfp_read_field_def_friend_handle_apply_c2s(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_friend_handle_apply_c2s(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_friend_handle_apply_c2s(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_friend_handle_apply_c2s(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_friend_handle_apply_c2s(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_friend_handle_apply_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_friend_handle_apply_c2s(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_friend_handle_apply_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_handle_apply_c2s(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_friend_handle_apply_c2s(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_handle_apply_c2s(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_friend_handle_apply_c2s(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_friend_handle_apply_c2s(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_friend_handle_apply_c2s(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_friend_handle_apply_c2s(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_friend_handle_apply_s2c(Bin, TrUserData) -> dfp_read_field_def_friend_handle_apply_s2c(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_friend_handle_apply_s2c(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_friend_handle_apply_s2c_success(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_friend_handle_apply_s2c(<<>>, 0, 0, _, F@_1, _) -> #friend_handle_apply_s2c{success = F@_1};
dfp_read_field_def_friend_handle_apply_s2c(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_friend_handle_apply_s2c(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_friend_handle_apply_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_handle_apply_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_friend_handle_apply_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_friend_handle_apply_s2c_success(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_friend_handle_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_friend_handle_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_friend_handle_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_friend_handle_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_friend_handle_apply_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_friend_handle_apply_s2c(<<>>, 0, 0, _, F@_1, _) -> #friend_handle_apply_s2c{success = F@_1}.

d_field_friend_handle_apply_s2c_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_friend_handle_apply_s2c_success(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_friend_handle_apply_s2c_success(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) -> {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest}, dfp_read_field_def_friend_handle_apply_s2c(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_friend_handle_apply_s2c(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_friend_handle_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_friend_handle_apply_s2c(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_handle_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_friend_handle_apply_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_friend_handle_apply_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_friend_handle_apply_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_handle_apply_s2c(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_friend_handle_apply_s2c(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_handle_apply_s2c(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_friend_handle_apply_s2c(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_handle_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_friend_handle_apply_s2c(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_handle_apply_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_friend_list_c2s(Bin, TrUserData) -> dfp_read_field_def_friend_list_c2s(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_friend_list_c2s(<<>>, 0, 0, _, _) -> #friend_list_c2s{};
dfp_read_field_def_friend_list_c2s(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_friend_list_c2s(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_friend_list_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_list_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_friend_list_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_friend_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      1 -> skip_64_friend_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      2 -> skip_length_delimited_friend_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      3 -> skip_group_friend_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      5 -> skip_32_friend_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_friend_list_c2s(<<>>, 0, 0, _, _) -> #friend_list_c2s{}.

skip_varint_friend_list_c2s(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_friend_list_c2s(Rest, Z1, Z2, F, TrUserData);
skip_varint_friend_list_c2s(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_friend_list_c2s(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_friend_list_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_friend_list_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_friend_list_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_list_c2s(Rest2, 0, 0, F, TrUserData).

skip_group_friend_list_c2s(Bin, _, Z2, FNum, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_list_c2s(Rest, 0, Z2, FNum, TrUserData).

skip_32_friend_list_c2s(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_friend_list_c2s(Rest, Z1, Z2, F, TrUserData).

skip_64_friend_list_c2s(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_friend_list_c2s(Rest, Z1, Z2, F, TrUserData).

decode_msg_friend_list_s2c(Bin, TrUserData) -> dfp_read_field_def_friend_list_s2c(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_friend_list_s2c(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_friend_list_s2c_friend_list(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_friend_list_s2c(<<>>, 0, 0, _, R1, TrUserData) -> #friend_list_s2c{friend_list = lists_reverse(R1, TrUserData)};
dfp_read_field_def_friend_list_s2c(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_friend_list_s2c(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_friend_list_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_friend_list_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_friend_list_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_friend_list_s2c_friend_list(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_friend_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_friend_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_friend_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_friend_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_friend_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_friend_list_s2c(<<>>, 0, 0, _, R1, TrUserData) -> #friend_list_s2c{friend_list = lists_reverse(R1, TrUserData)}.

d_field_friend_list_s2c_friend_list(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_friend_list_s2c_friend_list(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_friend_list_s2c_friend_list(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_p_friendInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_friend_list_s2c(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_friend_list_s2c(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_friend_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_friend_list_s2c(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_friend_list_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_friend_list_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_friend_list_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_friend_list_s2c(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_friend_list_s2c(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_friend_list_s2c(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_friend_list_s2c(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_friend_list_s2c(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_friend_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_p_friendInfo(Bin, TrUserData) -> dfp_read_field_def_p_friendInfo(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_friendInfo(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_p_friendInfo_role_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_p_friendInfo(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_p_friendInfo_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_p_friendInfo(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_p_friendInfo_gender(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_p_friendInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #p_friendInfo{role_id = F@_1, name = F@_2, gender = F@_3};
dfp_read_field_def_p_friendInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_p_friendInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_p_friendInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_p_friendInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_p_friendInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_p_friendInfo_role_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      18 -> d_field_p_friendInfo_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      24 -> d_field_p_friendInfo_gender(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_p_friendInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
	    1 -> skip_64_p_friendInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
	    2 -> skip_length_delimited_p_friendInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
	    3 -> skip_group_p_friendInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
	    5 -> skip_32_p_friendInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_p_friendInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #p_friendInfo{role_id = F@_1, name = F@_2, gender = F@_3}.

d_field_p_friendInfo_role_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_p_friendInfo_role_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_p_friendInfo_role_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_friendInfo(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_p_friendInfo_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_p_friendInfo_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_p_friendInfo_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end, dfp_read_field_def_p_friendInfo(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_p_friendInfo_gender(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_p_friendInfo_gender(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_p_friendInfo_gender(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_friendInfo(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_p_friendInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_p_friendInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_p_friendInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_p_friendInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_p_friendInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_p_friendInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_p_friendInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_p_friendInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_p_friendInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_p_friendInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_p_friendInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_p_friendInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_p_friendInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_p_friendInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      friend_apply_list_c2s -> merge_msg_friend_apply_list_c2s(Prev, New, TrUserData);
      friend_apply_list_s2c -> merge_msg_friend_apply_list_s2c(Prev, New, TrUserData);
      p_applyInfo -> merge_msg_p_applyInfo(Prev, New, TrUserData);
      friend_new_apply_c2s -> merge_msg_friend_new_apply_c2s(Prev, New, TrUserData);
      friend_new_apply_s2c -> merge_msg_friend_new_apply_s2c(Prev, New, TrUserData);
      friend_handle_apply_c2s -> merge_msg_friend_handle_apply_c2s(Prev, New, TrUserData);
      friend_handle_apply_s2c -> merge_msg_friend_handle_apply_s2c(Prev, New, TrUserData);
      friend_list_c2s -> merge_msg_friend_list_c2s(Prev, New, TrUserData);
      friend_list_s2c -> merge_msg_friend_list_s2c(Prev, New, TrUserData);
      p_friendInfo -> merge_msg_p_friendInfo(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_friend_apply_list_c2s/3}).
merge_msg_friend_apply_list_c2s(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_friend_apply_list_s2c/3}).
merge_msg_friend_apply_list_s2c(#friend_apply_list_s2c{apply_list = PFapply_list}, #friend_apply_list_s2c{apply_list = NFapply_list}, TrUserData) ->
    #friend_apply_list_s2c{apply_list =
			       if PFapply_list /= undefined, NFapply_list /= undefined -> 'erlang_++'(PFapply_list, NFapply_list, TrUserData);
				  PFapply_list == undefined -> NFapply_list;
				  NFapply_list == undefined -> PFapply_list
			       end}.

-compile({nowarn_unused_function,merge_msg_p_applyInfo/3}).
merge_msg_p_applyInfo(#p_applyInfo{name = PFname, gender = PFgender}, #p_applyInfo{id = NFid, role_id = NFrole_id, name = NFname, gender = NFgender}, _) ->
    #p_applyInfo{id = NFid, role_id = NFrole_id,
		 name =
		     if NFname =:= undefined -> PFname;
			true -> NFname
		     end,
		 gender =
		     if NFgender =:= undefined -> PFgender;
			true -> NFgender
		     end}.

-compile({nowarn_unused_function,merge_msg_friend_new_apply_c2s/3}).
merge_msg_friend_new_apply_c2s(#friend_new_apply_c2s{}, #friend_new_apply_c2s{friend_uid = NFfriend_uid}, _) -> #friend_new_apply_c2s{friend_uid = NFfriend_uid}.

-compile({nowarn_unused_function,merge_msg_friend_new_apply_s2c/3}).
merge_msg_friend_new_apply_s2c(#friend_new_apply_s2c{}, #friend_new_apply_s2c{success = NFsuccess}, _) -> #friend_new_apply_s2c{success = NFsuccess}.

-compile({nowarn_unused_function,merge_msg_friend_handle_apply_c2s/3}).
merge_msg_friend_handle_apply_c2s(#friend_handle_apply_c2s{}, #friend_handle_apply_c2s{apply_id = NFapply_id, is_accept = NFis_accept}, _) -> #friend_handle_apply_c2s{apply_id = NFapply_id, is_accept = NFis_accept}.

-compile({nowarn_unused_function,merge_msg_friend_handle_apply_s2c/3}).
merge_msg_friend_handle_apply_s2c(#friend_handle_apply_s2c{}, #friend_handle_apply_s2c{success = NFsuccess}, _) -> #friend_handle_apply_s2c{success = NFsuccess}.

-compile({nowarn_unused_function,merge_msg_friend_list_c2s/3}).
merge_msg_friend_list_c2s(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_friend_list_s2c/3}).
merge_msg_friend_list_s2c(#friend_list_s2c{friend_list = PFfriend_list}, #friend_list_s2c{friend_list = NFfriend_list}, TrUserData) ->
    #friend_list_s2c{friend_list =
			 if PFfriend_list /= undefined, NFfriend_list /= undefined -> 'erlang_++'(PFfriend_list, NFfriend_list, TrUserData);
			    PFfriend_list == undefined -> NFfriend_list;
			    NFfriend_list == undefined -> PFfriend_list
			 end}.

-compile({nowarn_unused_function,merge_msg_p_friendInfo/3}).
merge_msg_p_friendInfo(#p_friendInfo{name = PFname, gender = PFgender}, #p_friendInfo{role_id = NFrole_id, name = NFname, gender = NFgender}, _) ->
    #p_friendInfo{role_id = NFrole_id,
		  name =
		      if NFname =:= undefined -> PFname;
			 true -> NFname
		      end,
		  gender =
		      if NFgender =:= undefined -> PFgender;
			 true -> NFgender
		      end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      friend_apply_list_c2s -> v_msg_friend_apply_list_c2s(Msg, [MsgName], TrUserData);
      friend_apply_list_s2c -> v_msg_friend_apply_list_s2c(Msg, [MsgName], TrUserData);
      p_applyInfo -> v_msg_p_applyInfo(Msg, [MsgName], TrUserData);
      friend_new_apply_c2s -> v_msg_friend_new_apply_c2s(Msg, [MsgName], TrUserData);
      friend_new_apply_s2c -> v_msg_friend_new_apply_s2c(Msg, [MsgName], TrUserData);
      friend_handle_apply_c2s -> v_msg_friend_handle_apply_c2s(Msg, [MsgName], TrUserData);
      friend_handle_apply_s2c -> v_msg_friend_handle_apply_s2c(Msg, [MsgName], TrUserData);
      friend_list_c2s -> v_msg_friend_list_c2s(Msg, [MsgName], TrUserData);
      friend_list_s2c -> v_msg_friend_list_s2c(Msg, [MsgName], TrUserData);
      p_friendInfo -> v_msg_p_friendInfo(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_friend_apply_list_c2s/3}).
-dialyzer({nowarn_function,v_msg_friend_apply_list_c2s/3}).
v_msg_friend_apply_list_c2s(#friend_apply_list_c2s{}, _Path, _) -> ok;
v_msg_friend_apply_list_c2s(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_apply_list_c2s}, X, Path).

-compile({nowarn_unused_function,v_msg_friend_apply_list_s2c/3}).
-dialyzer({nowarn_function,v_msg_friend_apply_list_s2c/3}).
v_msg_friend_apply_list_s2c(#friend_apply_list_s2c{apply_list = F1}, Path, TrUserData) ->
    if is_list(F1) -> _ = [v_msg_p_applyInfo(Elem, [apply_list | Path], TrUserData) || Elem <- F1], ok;
       true -> mk_type_error({invalid_list_of, {msg, p_applyInfo}}, F1, [apply_list | Path])
    end,
    ok;
v_msg_friend_apply_list_s2c(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_apply_list_s2c}, X, Path).

-compile({nowarn_unused_function,v_msg_p_applyInfo/3}).
-dialyzer({nowarn_function,v_msg_p_applyInfo/3}).
v_msg_p_applyInfo(#p_applyInfo{id = F1, role_id = F2, name = F3, gender = F4}, Path, TrUserData) ->
    v_type_int64(F1, [id | Path], TrUserData),
    v_type_int64(F2, [role_id | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [gender | Path], TrUserData)
    end,
    ok;
v_msg_p_applyInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, p_applyInfo}, X, Path).

-compile({nowarn_unused_function,v_msg_friend_new_apply_c2s/3}).
-dialyzer({nowarn_function,v_msg_friend_new_apply_c2s/3}).
v_msg_friend_new_apply_c2s(#friend_new_apply_c2s{friend_uid = F1}, Path, TrUserData) -> v_type_int64(F1, [friend_uid | Path], TrUserData), ok;
v_msg_friend_new_apply_c2s(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_new_apply_c2s}, X, Path).

-compile({nowarn_unused_function,v_msg_friend_new_apply_s2c/3}).
-dialyzer({nowarn_function,v_msg_friend_new_apply_s2c/3}).
v_msg_friend_new_apply_s2c(#friend_new_apply_s2c{success = F1}, Path, TrUserData) -> v_type_bool(F1, [success | Path], TrUserData), ok;
v_msg_friend_new_apply_s2c(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_new_apply_s2c}, X, Path).

-compile({nowarn_unused_function,v_msg_friend_handle_apply_c2s/3}).
-dialyzer({nowarn_function,v_msg_friend_handle_apply_c2s/3}).
v_msg_friend_handle_apply_c2s(#friend_handle_apply_c2s{apply_id = F1, is_accept = F2}, Path, TrUserData) -> v_type_int64(F1, [apply_id | Path], TrUserData), v_type_bool(F2, [is_accept | Path], TrUserData), ok;
v_msg_friend_handle_apply_c2s(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_handle_apply_c2s}, X, Path).

-compile({nowarn_unused_function,v_msg_friend_handle_apply_s2c/3}).
-dialyzer({nowarn_function,v_msg_friend_handle_apply_s2c/3}).
v_msg_friend_handle_apply_s2c(#friend_handle_apply_s2c{success = F1}, Path, TrUserData) -> v_type_bool(F1, [success | Path], TrUserData), ok;
v_msg_friend_handle_apply_s2c(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_handle_apply_s2c}, X, Path).

-compile({nowarn_unused_function,v_msg_friend_list_c2s/3}).
-dialyzer({nowarn_function,v_msg_friend_list_c2s/3}).
v_msg_friend_list_c2s(#friend_list_c2s{}, _Path, _) -> ok;
v_msg_friend_list_c2s(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_list_c2s}, X, Path).

-compile({nowarn_unused_function,v_msg_friend_list_s2c/3}).
-dialyzer({nowarn_function,v_msg_friend_list_s2c/3}).
v_msg_friend_list_s2c(#friend_list_s2c{friend_list = F1}, Path, TrUserData) ->
    if is_list(F1) -> _ = [v_msg_p_friendInfo(Elem, [friend_list | Path], TrUserData) || Elem <- F1], ok;
       true -> mk_type_error({invalid_list_of, {msg, p_friendInfo}}, F1, [friend_list | Path])
    end,
    ok;
v_msg_friend_list_s2c(X, Path, _TrUserData) -> mk_type_error({expected_msg, friend_list_s2c}, X, Path).

-compile({nowarn_unused_function,v_msg_p_friendInfo/3}).
-dialyzer({nowarn_function,v_msg_p_friendInfo/3}).
v_msg_p_friendInfo(#p_friendInfo{role_id = F1, name = F2, gender = F3}, Path, TrUserData) ->
    v_type_int64(F1, [role_id | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [gender | Path], TrUserData)
    end,
    ok;
v_msg_p_friendInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, p_friendInfo}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) -> Path2 = prettify_path(Path), erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, friend_apply_list_c2s}, []}, {{msg, friend_apply_list_s2c}, [#field{name = apply_list, fnum = 1, rnum = 2, type = {msg, p_applyInfo}, occurrence = repeated, opts = []}]},
     {{msg, p_applyInfo},
      [#field{name = id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = role_id, fnum = 2, rnum = 3, type = int64, occurrence = required, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = gender, fnum = 4, rnum = 5, type = int32, occurrence = optional, opts = []}]},
     {{msg, friend_new_apply_c2s}, [#field{name = friend_uid, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}]},
     {{msg, friend_new_apply_s2c}, [#field{name = success, fnum = 1, rnum = 2, type = bool, occurrence = required, opts = []}]},
     {{msg, friend_handle_apply_c2s}, [#field{name = apply_id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = is_accept, fnum = 2, rnum = 3, type = bool, occurrence = required, opts = []}]},
     {{msg, friend_handle_apply_s2c}, [#field{name = success, fnum = 1, rnum = 2, type = bool, occurrence = required, opts = []}]}, {{msg, friend_list_c2s}, []},
     {{msg, friend_list_s2c}, [#field{name = friend_list, fnum = 1, rnum = 2, type = {msg, p_friendInfo}, occurrence = repeated, opts = []}]},
     {{msg, p_friendInfo},
      [#field{name = role_id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = gender, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}]}].


get_msg_names() -> [friend_apply_list_c2s, friend_apply_list_s2c, p_applyInfo, friend_new_apply_c2s, friend_new_apply_s2c, friend_handle_apply_c2s, friend_handle_apply_s2c, friend_list_c2s, friend_list_s2c, p_friendInfo].


get_group_names() -> [].


get_msg_or_group_names() -> [friend_apply_list_c2s, friend_apply_list_s2c, p_applyInfo, friend_new_apply_c2s, friend_new_apply_s2c, friend_handle_apply_c2s, friend_handle_apply_s2c, friend_list_c2s, friend_list_s2c, p_friendInfo].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(friend_apply_list_c2s) -> [];
find_msg_def(friend_apply_list_s2c) -> [#field{name = apply_list, fnum = 1, rnum = 2, type = {msg, p_applyInfo}, occurrence = repeated, opts = []}];
find_msg_def(p_applyInfo) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = role_id, fnum = 2, rnum = 3, type = int64, occurrence = required, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}, #field{name = gender, fnum = 4, rnum = 5, type = int32, occurrence = optional, opts = []}];
find_msg_def(friend_new_apply_c2s) -> [#field{name = friend_uid, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}];
find_msg_def(friend_new_apply_s2c) -> [#field{name = success, fnum = 1, rnum = 2, type = bool, occurrence = required, opts = []}];
find_msg_def(friend_handle_apply_c2s) -> [#field{name = apply_id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = is_accept, fnum = 2, rnum = 3, type = bool, occurrence = required, opts = []}];
find_msg_def(friend_handle_apply_s2c) -> [#field{name = success, fnum = 1, rnum = 2, type = bool, occurrence = required, opts = []}];
find_msg_def(friend_list_c2s) -> [];
find_msg_def(friend_list_s2c) -> [#field{name = friend_list, fnum = 1, rnum = 2, type = {msg, p_friendInfo}, occurrence = repeated, opts = []}];
find_msg_def(p_friendInfo) ->
    [#field{name = role_id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = gender, fnum = 3, rnum = 4, type = int32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"yy.proto.friend_apply_list_c2s">>) -> friend_apply_list_c2s;
fqbin_to_msg_name(<<"yy.proto.friend_apply_list_s2c">>) -> friend_apply_list_s2c;
fqbin_to_msg_name(<<"yy.proto.p_applyInfo">>) -> p_applyInfo;
fqbin_to_msg_name(<<"yy.proto.friend_new_apply_c2s">>) -> friend_new_apply_c2s;
fqbin_to_msg_name(<<"yy.proto.friend_new_apply_s2c">>) -> friend_new_apply_s2c;
fqbin_to_msg_name(<<"yy.proto.friend_handle_apply_c2s">>) -> friend_handle_apply_c2s;
fqbin_to_msg_name(<<"yy.proto.friend_handle_apply_s2c">>) -> friend_handle_apply_s2c;
fqbin_to_msg_name(<<"yy.proto.friend_list_c2s">>) -> friend_list_c2s;
fqbin_to_msg_name(<<"yy.proto.friend_list_s2c">>) -> friend_list_s2c;
fqbin_to_msg_name(<<"yy.proto.p_friendInfo">>) -> p_friendInfo;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(friend_apply_list_c2s) -> <<"yy.proto.friend_apply_list_c2s">>;
msg_name_to_fqbin(friend_apply_list_s2c) -> <<"yy.proto.friend_apply_list_s2c">>;
msg_name_to_fqbin(p_applyInfo) -> <<"yy.proto.p_applyInfo">>;
msg_name_to_fqbin(friend_new_apply_c2s) -> <<"yy.proto.friend_new_apply_c2s">>;
msg_name_to_fqbin(friend_new_apply_s2c) -> <<"yy.proto.friend_new_apply_s2c">>;
msg_name_to_fqbin(friend_handle_apply_c2s) -> <<"yy.proto.friend_handle_apply_c2s">>;
msg_name_to_fqbin(friend_handle_apply_s2c) -> <<"yy.proto.friend_handle_apply_s2c">>;
msg_name_to_fqbin(friend_list_c2s) -> <<"yy.proto.friend_list_c2s">>;
msg_name_to_fqbin(friend_list_s2c) -> <<"yy.proto.friend_list_s2c">>;
msg_name_to_fqbin(p_friendInfo) -> <<"yy.proto.p_friendInfo">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'yy.proto'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "friend.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["friend.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["friend"].


get_msg_containment("friend") -> [friend_apply_list_c2s, friend_apply_list_s2c, friend_handle_apply_c2s, friend_handle_apply_s2c, friend_list_c2s, friend_list_s2c, friend_new_apply_c2s, friend_new_apply_s2c, p_applyInfo, p_friendInfo];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("friend") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("friend") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("friend") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("friend") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_new_apply_s2c">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_new_apply_c2s">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_list_s2c">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_list_c2s">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_handle_apply_s2c">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_handle_apply_c2s">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_apply_list_s2c">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.friend_apply_list_c2s">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.p_friendInfo">>) -> "friend";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.p_applyInfo">>) -> "friend";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.6".

gpb_version_as_list() ->
    [4,19,6].

gpb_version_source() ->
    "file".
