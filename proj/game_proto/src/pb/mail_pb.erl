%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.6
%% Version source: file
-module(mail_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("mail_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type mail_list_c2s() :: #mail_list_c2s{}.

-type mail_list_s2c() :: #mail_list_s2c{}.

-type p_mailInfo() :: #p_mailInfo{}.

-type mail_open_c2s() :: #mail_open_c2s{}.

-type mail_open_s2c() :: #mail_open_s2c{}.

-type clean_mails_c2s() :: #clean_mails_c2s{}.

-export_type(['mail_list_c2s'/0, 'mail_list_s2c'/0, 'p_mailInfo'/0, 'mail_open_c2s'/0, 'mail_open_s2c'/0, 'clean_mails_c2s'/0]).
-type '$msg_name'() :: mail_list_c2s | mail_list_s2c | p_mailInfo | mail_open_c2s | mail_open_s2c | clean_mails_c2s.
-type '$msg'() :: mail_list_c2s() | mail_list_s2c() | p_mailInfo() | mail_open_c2s() | mail_open_s2c() | clean_mails_c2s().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      mail_list_c2s -> encode_msg_mail_list_c2s(id(Msg, TrUserData), TrUserData);
      mail_list_s2c -> encode_msg_mail_list_s2c(id(Msg, TrUserData), TrUserData);
      p_mailInfo -> encode_msg_p_mailInfo(id(Msg, TrUserData), TrUserData);
      mail_open_c2s -> encode_msg_mail_open_c2s(id(Msg, TrUserData), TrUserData);
      mail_open_s2c -> encode_msg_mail_open_s2c(id(Msg, TrUserData), TrUserData);
      clean_mails_c2s -> encode_msg_clean_mails_c2s(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_mail_list_c2s(_Msg, _TrUserData) -> <<>>.

encode_msg_mail_list_s2c(Msg, TrUserData) -> encode_msg_mail_list_s2c(Msg, <<>>, TrUserData).


encode_msg_mail_list_s2c(#mail_list_s2c{mail_list = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_mail_list_s2c_mail_list(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_p_mailInfo(Msg, TrUserData) -> encode_msg_p_mailInfo(Msg, <<>>, TrUserData).


encode_msg_p_mailInfo(#p_mailInfo{id = F1, type = F2, from_id = F3, send_time = F4, title = F5, content = F6, is_read = F7, is_extract = F8}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_sint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
	    true -> begin TrF3 = id(F3, TrUserData), e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData) end
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> begin TrF4 = id(F4, TrUserData), e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData) end
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> begin TrF6 = id(F6, TrUserData), e_type_string(TrF6, <<B5/binary, 50>>, TrUserData) end
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> begin TrF7 = id(F7, TrUserData), e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData) end
	 end,
    if F8 == undefined -> B7;
       true -> begin TrF8 = id(F8, TrUserData), e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData) end
    end.

encode_msg_mail_open_c2s(Msg, TrUserData) -> encode_msg_mail_open_c2s(Msg, <<>>, TrUserData).


encode_msg_mail_open_c2s(#mail_open_c2s{mail_id = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_mail_open_s2c(Msg, TrUserData) -> encode_msg_mail_open_s2c(Msg, <<>>, TrUserData).


encode_msg_mail_open_s2c(#mail_open_s2c{success = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_clean_mails_c2s(_Msg, _TrUserData) -> <<>>.

e_mfield_mail_list_s2c_mail_list(Msg, Bin, TrUserData) -> SubBin = encode_msg_p_mailInfo(Msg, <<>>, TrUserData), Bin2 = e_varint(byte_size(SubBin), Bin), <<Bin2/binary, SubBin/binary>>.

e_field_mail_list_s2c_mail_list([Elem | Rest], Bin, TrUserData) -> Bin2 = <<Bin/binary, 10>>, Bin3 = e_mfield_mail_list_s2c_mail_list(id(Elem, TrUserData), Bin2, TrUserData), e_field_mail_list_s2c_mail_list(Rest, Bin3, TrUserData);
e_field_mail_list_s2c_mail_list([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) -> <<N:64/unsigned-native>> = <<Value:64/signed-native>>, e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) -> Utf8 = unicode:characters_to_binary(S), Bin2 = e_varint(byte_size(Utf8), Bin), <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) -> Bin2 = e_varint(byte_size(Bytes), Bin), <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) -> BytesBin = iolist_to_binary(Bytes), Bin2 = e_varint(byte_size(BytesBin), Bin), <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
	     {varint, FNum, N} -> BinF = e_varint(FNum bsl 3, Bin), e_varint(N, BinF);
	     {length_delimited, FNum, Data} -> BinF = e_varint(FNum bsl 3 bor 2, Bin), BinL = e_varint(byte_size(Data), BinF), <<BinL/binary, Data/binary>>;
	     {group, FNum, GroupFields} -> Bin1 = e_varint(FNum bsl 3 bor 3, Bin), Bin2 = e_unknown_elems(GroupFields, Bin1), e_varint(FNum bsl 3 bor 4, Bin2);
	     {fixed32, FNum, V} -> BinF = e_varint(FNum bsl 3 bor 5, Bin), <<BinF/binary, V:32/little>>;
	     {fixed64, FNum, V} -> BinF = e_varint(FNum bsl 3 bor 1, Bin), <<BinF/binary, V:64/little>>
	   end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) -> Bin2 = <<Bin/binary, (N band 127 bor 128)>>, e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) -> TrUserData = proplists:get_value(user_data, Opts), decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(mail_list_c2s, Bin, TrUserData) -> id(decode_msg_mail_list_c2s(Bin, TrUserData), TrUserData);
decode_msg_2_doit(mail_list_s2c, Bin, TrUserData) -> id(decode_msg_mail_list_s2c(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_mailInfo, Bin, TrUserData) -> id(decode_msg_p_mailInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit(mail_open_c2s, Bin, TrUserData) -> id(decode_msg_mail_open_c2s(Bin, TrUserData), TrUserData);
decode_msg_2_doit(mail_open_s2c, Bin, TrUserData) -> id(decode_msg_mail_open_s2c(Bin, TrUserData), TrUserData);
decode_msg_2_doit(clean_mails_c2s, Bin, TrUserData) -> id(decode_msg_clean_mails_c2s(Bin, TrUserData), TrUserData).



decode_msg_mail_list_c2s(Bin, TrUserData) -> dfp_read_field_def_mail_list_c2s(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_mail_list_c2s(<<>>, 0, 0, _, _) -> #mail_list_c2s{};
dfp_read_field_def_mail_list_c2s(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_mail_list_c2s(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_mail_list_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_mail_list_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_mail_list_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_mail_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      1 -> skip_64_mail_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      2 -> skip_length_delimited_mail_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      3 -> skip_group_mail_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      5 -> skip_32_mail_list_c2s(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_mail_list_c2s(<<>>, 0, 0, _, _) -> #mail_list_c2s{}.

skip_varint_mail_list_c2s(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_mail_list_c2s(Rest, Z1, Z2, F, TrUserData);
skip_varint_mail_list_c2s(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_mail_list_c2s(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_mail_list_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_mail_list_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_mail_list_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_mail_list_c2s(Rest2, 0, 0, F, TrUserData).

skip_group_mail_list_c2s(Bin, _, Z2, FNum, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_mail_list_c2s(Rest, 0, Z2, FNum, TrUserData).

skip_32_mail_list_c2s(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_mail_list_c2s(Rest, Z1, Z2, F, TrUserData).

skip_64_mail_list_c2s(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_mail_list_c2s(Rest, Z1, Z2, F, TrUserData).

decode_msg_mail_list_s2c(Bin, TrUserData) -> dfp_read_field_def_mail_list_s2c(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_mail_list_s2c(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_mail_list_s2c_mail_list(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_mail_list_s2c(<<>>, 0, 0, _, R1, TrUserData) -> #mail_list_s2c{mail_list = lists_reverse(R1, TrUserData)};
dfp_read_field_def_mail_list_s2c(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_mail_list_s2c(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_mail_list_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_mail_list_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_mail_list_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_mail_list_s2c_mail_list(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_mail_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_mail_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_mail_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_mail_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_mail_list_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_mail_list_s2c(<<>>, 0, 0, _, R1, TrUserData) -> #mail_list_s2c{mail_list = lists_reverse(R1, TrUserData)}.

d_field_mail_list_s2c_mail_list(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_mail_list_s2c_mail_list(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_mail_list_s2c_mail_list(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_p_mailInfo(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_mail_list_s2c(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_mail_list_s2c(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_mail_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_mail_list_s2c(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_mail_list_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_mail_list_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_mail_list_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_mail_list_s2c(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_mail_list_s2c(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_mail_list_s2c(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_mail_list_s2c(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_mail_list_s2c(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_list_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_p_mailInfo(Bin, TrUserData) ->
    dfp_read_field_def_p_mailInfo(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_mailInfo(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_from_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_send_time(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_title(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_content(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_is_read(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> d_field_p_mailInfo_is_extract(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_mailInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _) -> #p_mailInfo{id = F@_1, type = F@_2, from_id = F@_3, send_time = F@_4, title = F@_5, content = F@_6, is_read = F@_7, is_extract = F@_8};
dfp_read_field_def_p_mailInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dg_read_field_def_p_mailInfo(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

dg_read_field_def_p_mailInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_p_mailInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_p_mailInfo(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_p_mailInfo_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      16 -> d_field_p_mailInfo_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      24 -> d_field_p_mailInfo_from_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      32 -> d_field_p_mailInfo_send_time(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      42 -> d_field_p_mailInfo_title(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      50 -> d_field_p_mailInfo_content(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      56 -> d_field_p_mailInfo_is_read(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      64 -> d_field_p_mailInfo_is_extract(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_p_mailInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
	    1 -> skip_64_p_mailInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
	    2 -> skip_length_delimited_p_mailInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
	    3 -> skip_group_p_mailInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
	    5 -> skip_32_p_mailInfo(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData)
	  end
    end;
dg_read_field_def_p_mailInfo(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _) -> #p_mailInfo{id = F@_1, type = F@_2, from_id = F@_3, send_time = F@_4, title = F@_5, content = F@_6, is_read = F@_7, is_extract = F@_8}.

d_field_p_mailInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 -> d_field_p_mailInfo_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_p_mailInfo_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_p_mailInfo_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = (X bsl N + Acc) band 4294967295,
			    if ZValue band 1 =:= 0 -> id(ZValue bsr 1, TrUserData);
			       true -> id(-(ZValue + 1 bsr 1), TrUserData)
			    end
			  end,
			  Rest},
    dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_p_mailInfo_from_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_p_mailInfo_from_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_from_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_p_mailInfo_send_time(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_p_mailInfo_send_time(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_send_time(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_p_mailInfo_title(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_p_mailInfo_title(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_title(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, TrUserData).

d_field_p_mailInfo_content(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_p_mailInfo_content(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_content(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, TrUserData).

d_field_p_mailInfo_is_read(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_p_mailInfo_is_read(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_is_read(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest}, dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, TrUserData).

d_field_p_mailInfo_is_extract(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    d_field_p_mailInfo_is_extract(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_mailInfo_is_extract(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest}, dfp_read_field_def_p_mailInfo(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, TrUserData).

skip_varint_p_mailInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> skip_varint_p_mailInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_varint_p_mailInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dfp_read_field_def_p_mailInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_length_delimited_p_mailInfo(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) when N < 57 ->
    skip_length_delimited_p_mailInfo(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_length_delimited_p_mailInfo(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_p_mailInfo(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_group_p_mailInfo(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_p_mailInfo(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_32_p_mailInfo(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dfp_read_field_def_p_mailInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_64_p_mailInfo(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) -> dfp_read_field_def_p_mailInfo(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

decode_msg_mail_open_c2s(Bin, TrUserData) -> dfp_read_field_def_mail_open_c2s(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_mail_open_c2s(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_mail_open_c2s_mail_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_mail_open_c2s(<<>>, 0, 0, _, F@_1, _) -> #mail_open_c2s{mail_id = F@_1};
dfp_read_field_def_mail_open_c2s(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_mail_open_c2s(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_mail_open_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_mail_open_c2s(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_mail_open_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_mail_open_c2s_mail_id(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_mail_open_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_mail_open_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_mail_open_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_mail_open_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_mail_open_c2s(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_mail_open_c2s(<<>>, 0, 0, _, F@_1, _) -> #mail_open_c2s{mail_id = F@_1}.

d_field_mail_open_c2s_mail_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_mail_open_c2s_mail_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_mail_open_c2s_mail_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:64/signed-native>> = <<(X bsl N + Acc):64/unsigned-native>>, id(Res, TrUserData) end, Rest}, dfp_read_field_def_mail_open_c2s(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_mail_open_c2s(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_mail_open_c2s(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_mail_open_c2s(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_open_c2s(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_mail_open_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_mail_open_c2s(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_mail_open_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_mail_open_c2s(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_mail_open_c2s(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_mail_open_c2s(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_mail_open_c2s(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_open_c2s(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_mail_open_c2s(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_open_c2s(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_mail_open_s2c(Bin, TrUserData) -> dfp_read_field_def_mail_open_s2c(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_mail_open_s2c(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_mail_open_s2c_success(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_mail_open_s2c(<<>>, 0, 0, _, F@_1, _) -> #mail_open_s2c{success = F@_1};
dfp_read_field_def_mail_open_s2c(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_mail_open_s2c(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_mail_open_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_mail_open_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_mail_open_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_mail_open_s2c_success(Rest, 0, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_mail_open_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    1 -> skip_64_mail_open_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    2 -> skip_length_delimited_mail_open_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    3 -> skip_group_mail_open_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
	    5 -> skip_32_mail_open_s2c(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_mail_open_s2c(<<>>, 0, 0, _, F@_1, _) -> #mail_open_s2c{success = F@_1}.

d_field_mail_open_s2c_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_mail_open_s2c_success(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_mail_open_s2c_success(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) -> {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest}, dfp_read_field_def_mail_open_s2c(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_mail_open_s2c(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_mail_open_s2c(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_mail_open_s2c(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_open_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_mail_open_s2c(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_mail_open_s2c(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_mail_open_s2c(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_mail_open_s2c(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_mail_open_s2c(Bin, _, Z2, FNum, F@_1, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_mail_open_s2c(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_mail_open_s2c(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_open_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_mail_open_s2c(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_mail_open_s2c(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_clean_mails_c2s(Bin, TrUserData) -> dfp_read_field_def_clean_mails_c2s(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_clean_mails_c2s(<<>>, 0, 0, _, _) -> #clean_mails_c2s{};
dfp_read_field_def_clean_mails_c2s(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_clean_mails_c2s(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_clean_mails_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_clean_mails_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_clean_mails_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_clean_mails_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      1 -> skip_64_clean_mails_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      2 -> skip_length_delimited_clean_mails_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      3 -> skip_group_clean_mails_c2s(Rest, 0, 0, Key bsr 3, TrUserData);
      5 -> skip_32_clean_mails_c2s(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_clean_mails_c2s(<<>>, 0, 0, _, _) -> #clean_mails_c2s{}.

skip_varint_clean_mails_c2s(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_clean_mails_c2s(Rest, Z1, Z2, F, TrUserData);
skip_varint_clean_mails_c2s(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_clean_mails_c2s(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_clean_mails_c2s(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_clean_mails_c2s(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_clean_mails_c2s(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) -> Length = X bsl N + Acc, <<_:Length/binary, Rest2/binary>> = Rest, dfp_read_field_def_clean_mails_c2s(Rest2, 0, 0, F, TrUserData).

skip_group_clean_mails_c2s(Bin, _, Z2, FNum, TrUserData) -> {_, Rest} = read_group(Bin, FNum), dfp_read_field_def_clean_mails_c2s(Rest, 0, Z2, FNum, TrUserData).

skip_32_clean_mails_c2s(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_clean_mails_c2s(Rest, Z1, Z2, F, TrUserData).

skip_64_clean_mails_c2s(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_clean_mails_c2s(Rest, Z1, Z2, F, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      mail_list_c2s -> merge_msg_mail_list_c2s(Prev, New, TrUserData);
      mail_list_s2c -> merge_msg_mail_list_s2c(Prev, New, TrUserData);
      p_mailInfo -> merge_msg_p_mailInfo(Prev, New, TrUserData);
      mail_open_c2s -> merge_msg_mail_open_c2s(Prev, New, TrUserData);
      mail_open_s2c -> merge_msg_mail_open_s2c(Prev, New, TrUserData);
      clean_mails_c2s -> merge_msg_clean_mails_c2s(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_mail_list_c2s/3}).
merge_msg_mail_list_c2s(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_mail_list_s2c/3}).
merge_msg_mail_list_s2c(#mail_list_s2c{mail_list = PFmail_list}, #mail_list_s2c{mail_list = NFmail_list}, TrUserData) ->
    #mail_list_s2c{mail_list =
		       if PFmail_list /= undefined, NFmail_list /= undefined -> 'erlang_++'(PFmail_list, NFmail_list, TrUserData);
			  PFmail_list == undefined -> NFmail_list;
			  NFmail_list == undefined -> PFmail_list
		       end}.

-compile({nowarn_unused_function,merge_msg_p_mailInfo/3}).
merge_msg_p_mailInfo(#p_mailInfo{from_id = PFfrom_id, send_time = PFsend_time, title = PFtitle, content = PFcontent, is_read = PFis_read, is_extract = PFis_extract},
		     #p_mailInfo{id = NFid, type = NFtype, from_id = NFfrom_id, send_time = NFsend_time, title = NFtitle, content = NFcontent, is_read = NFis_read, is_extract = NFis_extract}, _) ->
    #p_mailInfo{id = NFid, type = NFtype,
		from_id =
		    if NFfrom_id =:= undefined -> PFfrom_id;
		       true -> NFfrom_id
		    end,
		send_time =
		    if NFsend_time =:= undefined -> PFsend_time;
		       true -> NFsend_time
		    end,
		title =
		    if NFtitle =:= undefined -> PFtitle;
		       true -> NFtitle
		    end,
		content =
		    if NFcontent =:= undefined -> PFcontent;
		       true -> NFcontent
		    end,
		is_read =
		    if NFis_read =:= undefined -> PFis_read;
		       true -> NFis_read
		    end,
		is_extract =
		    if NFis_extract =:= undefined -> PFis_extract;
		       true -> NFis_extract
		    end}.

-compile({nowarn_unused_function,merge_msg_mail_open_c2s/3}).
merge_msg_mail_open_c2s(#mail_open_c2s{}, #mail_open_c2s{mail_id = NFmail_id}, _) -> #mail_open_c2s{mail_id = NFmail_id}.

-compile({nowarn_unused_function,merge_msg_mail_open_s2c/3}).
merge_msg_mail_open_s2c(#mail_open_s2c{}, #mail_open_s2c{success = NFsuccess}, _) -> #mail_open_s2c{success = NFsuccess}.

-compile({nowarn_unused_function,merge_msg_clean_mails_c2s/3}).
merge_msg_clean_mails_c2s(_Prev, New, _TrUserData) -> New.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      mail_list_c2s -> v_msg_mail_list_c2s(Msg, [MsgName], TrUserData);
      mail_list_s2c -> v_msg_mail_list_s2c(Msg, [MsgName], TrUserData);
      p_mailInfo -> v_msg_p_mailInfo(Msg, [MsgName], TrUserData);
      mail_open_c2s -> v_msg_mail_open_c2s(Msg, [MsgName], TrUserData);
      mail_open_s2c -> v_msg_mail_open_s2c(Msg, [MsgName], TrUserData);
      clean_mails_c2s -> v_msg_clean_mails_c2s(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_mail_list_c2s/3}).
-dialyzer({nowarn_function,v_msg_mail_list_c2s/3}).
v_msg_mail_list_c2s(#mail_list_c2s{}, _Path, _) -> ok;
v_msg_mail_list_c2s(X, Path, _TrUserData) -> mk_type_error({expected_msg, mail_list_c2s}, X, Path).

-compile({nowarn_unused_function,v_msg_mail_list_s2c/3}).
-dialyzer({nowarn_function,v_msg_mail_list_s2c/3}).
v_msg_mail_list_s2c(#mail_list_s2c{mail_list = F1}, Path, TrUserData) ->
    if is_list(F1) -> _ = [v_msg_p_mailInfo(Elem, [mail_list | Path], TrUserData) || Elem <- F1], ok;
       true -> mk_type_error({invalid_list_of, {msg, p_mailInfo}}, F1, [mail_list | Path])
    end,
    ok;
v_msg_mail_list_s2c(X, Path, _TrUserData) -> mk_type_error({expected_msg, mail_list_s2c}, X, Path).

-compile({nowarn_unused_function,v_msg_p_mailInfo/3}).
-dialyzer({nowarn_function,v_msg_p_mailInfo/3}).
v_msg_p_mailInfo(#p_mailInfo{id = F1, type = F2, from_id = F3, send_time = F4, title = F5, content = F6, is_read = F7, is_extract = F8}, Path, TrUserData) ->
    v_type_int64(F1, [id | Path], TrUserData),
    v_type_sint32(F2, [type | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [from_id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, [send_time | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [title | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [content | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [is_read | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [is_extract | Path], TrUserData)
    end,
    ok;
v_msg_p_mailInfo(X, Path, _TrUserData) -> mk_type_error({expected_msg, p_mailInfo}, X, Path).

-compile({nowarn_unused_function,v_msg_mail_open_c2s/3}).
-dialyzer({nowarn_function,v_msg_mail_open_c2s/3}).
v_msg_mail_open_c2s(#mail_open_c2s{mail_id = F1}, Path, TrUserData) -> v_type_int64(F1, [mail_id | Path], TrUserData), ok;
v_msg_mail_open_c2s(X, Path, _TrUserData) -> mk_type_error({expected_msg, mail_open_c2s}, X, Path).

-compile({nowarn_unused_function,v_msg_mail_open_s2c/3}).
-dialyzer({nowarn_function,v_msg_mail_open_s2c/3}).
v_msg_mail_open_s2c(#mail_open_s2c{success = F1}, Path, TrUserData) -> v_type_bool(F1, [success | Path], TrUserData), ok;
v_msg_mail_open_s2c(X, Path, _TrUserData) -> mk_type_error({expected_msg, mail_open_s2c}, X, Path).

-compile({nowarn_unused_function,v_msg_clean_mails_c2s/3}).
-dialyzer({nowarn_function,v_msg_clean_mails_c2s/3}).
v_msg_clean_mails_c2s(#clean_mails_c2s{}, _Path, _) -> ok;
v_msg_clean_mails_c2s(X, Path, _TrUserData) -> mk_type_error({expected_msg, clean_mails_c2s}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData) when -9223372036854775808 =< N, N =< 9223372036854775807 -> ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int64, signed, 64}, N, Path);
v_type_int64(X, Path, _TrUserData) -> mk_type_error({bad_integer, int64, signed, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) -> Path2 = prettify_path(Path), erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, mail_list_c2s}, []}, {{msg, mail_list_s2c}, [#field{name = mail_list, fnum = 1, rnum = 2, type = {msg, p_mailInfo}, occurrence = repeated, opts = []}]},
     {{msg, p_mailInfo},
      [#field{name = id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = sint32, occurrence = required, opts = []},
       #field{name = from_id, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}, #field{name = send_time, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
       #field{name = title, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}, #field{name = content, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []},
       #field{name = is_read, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []}, #field{name = is_extract, fnum = 8, rnum = 9, type = bool, occurrence = optional, opts = []}]},
     {{msg, mail_open_c2s}, [#field{name = mail_id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}]}, {{msg, mail_open_s2c}, [#field{name = success, fnum = 1, rnum = 2, type = bool, occurrence = required, opts = []}]},
     {{msg, clean_mails_c2s}, []}].


get_msg_names() -> [mail_list_c2s, mail_list_s2c, p_mailInfo, mail_open_c2s, mail_open_s2c, clean_mails_c2s].


get_group_names() -> [].


get_msg_or_group_names() -> [mail_list_c2s, mail_list_s2c, p_mailInfo, mail_open_c2s, mail_open_s2c, clean_mails_c2s].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(mail_list_c2s) -> [];
find_msg_def(mail_list_s2c) -> [#field{name = mail_list, fnum = 1, rnum = 2, type = {msg, p_mailInfo}, occurrence = repeated, opts = []}];
find_msg_def(p_mailInfo) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}, #field{name = type, fnum = 2, rnum = 3, type = sint32, occurrence = required, opts = []},
     #field{name = from_id, fnum = 3, rnum = 4, type = int64, occurrence = optional, opts = []}, #field{name = send_time, fnum = 4, rnum = 5, type = int64, occurrence = optional, opts = []},
     #field{name = title, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []}, #field{name = content, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []},
     #field{name = is_read, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []}, #field{name = is_extract, fnum = 8, rnum = 9, type = bool, occurrence = optional, opts = []}];
find_msg_def(mail_open_c2s) -> [#field{name = mail_id, fnum = 1, rnum = 2, type = int64, occurrence = required, opts = []}];
find_msg_def(mail_open_s2c) -> [#field{name = success, fnum = 1, rnum = 2, type = bool, occurrence = required, opts = []}];
find_msg_def(clean_mails_c2s) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"yy.proto.mail_list_c2s">>) -> mail_list_c2s;
fqbin_to_msg_name(<<"yy.proto.mail_list_s2c">>) -> mail_list_s2c;
fqbin_to_msg_name(<<"yy.proto.p_mailInfo">>) -> p_mailInfo;
fqbin_to_msg_name(<<"yy.proto.mail_open_c2s">>) -> mail_open_c2s;
fqbin_to_msg_name(<<"yy.proto.mail_open_s2c">>) -> mail_open_s2c;
fqbin_to_msg_name(<<"yy.proto.clean_mails_c2s">>) -> clean_mails_c2s;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(mail_list_c2s) -> <<"yy.proto.mail_list_c2s">>;
msg_name_to_fqbin(mail_list_s2c) -> <<"yy.proto.mail_list_s2c">>;
msg_name_to_fqbin(p_mailInfo) -> <<"yy.proto.p_mailInfo">>;
msg_name_to_fqbin(mail_open_c2s) -> <<"yy.proto.mail_open_c2s">>;
msg_name_to_fqbin(mail_open_s2c) -> <<"yy.proto.mail_open_s2c">>;
msg_name_to_fqbin(clean_mails_c2s) -> <<"yy.proto.clean_mails_c2s">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'yy.proto'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "mail.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["mail.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["mail"].


get_msg_containment("mail") -> [clean_mails_c2s, mail_list_c2s, mail_list_s2c, mail_open_c2s, mail_open_s2c, p_mailInfo];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("mail") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("mail") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("mail") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("mail") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"yy.proto.mail_open_s2c">>) -> "mail";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.mail_open_c2s">>) -> "mail";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.mail_list_s2c">>) -> "mail";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.mail_list_c2s">>) -> "mail";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.clean_mails_c2s">>) -> "mail";
get_proto_by_msg_name_as_fqbin(<<"yy.proto.p_mailInfo">>) -> "mail";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.6".

gpb_version_as_list() ->
    [4,19,6].

gpb_version_source() ->
    "file".
